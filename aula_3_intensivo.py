# -*- coding: utf-8 -*-
"""aula_3_intensivo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17c7meEF362Fr64C-2Am4ooCcwx8CwXkd
"""

# automatização de rotinas de geoprocessamento com python

# importar BeautifulSoup e os componentes da URLLIB

from bs4 import BeautifulSoup
from urllib.request import Request, urlopen, urlretrieve

from google.colab import drive
drive.mount('/content/drive')

# definindo a variavel do endereço; onde está os dados censitários 

ende = "https://ftp.ibge.gov.br/Censos/Censo_Demografico_2010/Resultados_do_Universo/Agregados_por_Setores_Censitarios/"

# criando objeto do tipo request que representa a requisiçõa que você está fazendo
requi = Request(ende)

# utilizar o request

html_pag = urlopen(requi)

html_pag

# utilizar lxml como parser para ler a estrutura da páginae conteúdo da resposta http

sopa = BeautifulSoup(html_pag,'lxml')

# inspecionar resultado
sopa

#  utilizar findAll para encontrar a tag ancora
for link in sopa.findAll('a'):
  print(link)

# exemplo com o ultimo link executado mo loop acima 
link.get('href')

# criar lista vazia
links = []

# iniciando o loop pelos links da página
for link in sopa.findAll('a'):
    # extraindo o nome do arquivo e adicionando a lista de links
    links.append(link.get('href'))
# inspecionando o resultado 
print(links)

for link in links:
  try:
    urlretrieve(url=ende+link, filename=link)
  except:
    continue

# conectar ao Drive

from google.colab import drive

drive.mount('/content/drive')

!pip install geopandas==0.12.0 -q

import geopandas as gpd

censo_RJ = gpd.read_file('/content/drive/MyDrive/aula_3_intensePY/RJ_Setores_2021.shp')

censo_RJ.head(5)

censo_RJ.plot()

# importar biblioteca
from google.colab import files

# faça upload do arquivo
uploadead= files.upload()

# importar pandas
import pandas as pd

# leia dados do censo

censo= pd.read_csv('/content/drive/MyDrive/aula_3_intensePY/Básico_RJ_Sample.csv')

censo.head()

# selecionar colunas de interesse

censo = censo[['Cod_setor', 'V002']]

censo.head()

# verificar tipo de dados para a coluna com os códigos de setores censitários
censo_RJ.CD_SETOR.dtype

censo.Cod_setor.dtype

# mudar para tipo number INT

censo_RJ.CD_SETOR = censo_RJ.CD_SETOR.astype(int)

censo_RJ.head()

# fazendo table join
dados = censo_RJ.merge(censo, left_on='CD_SETOR', right_on='Cod_setor')
dados.head()

#  biblioteca para mapas mapclassify

!pip install mapclassify -q

# importar matplotlib

import matplotlib.pyplot as plt

# automatizar geração de mapas
for  i in pd.unique(dados.NM_MUN):
  fig,ax = plt.subplots(figsize=(10,10))
  selec = dados[dados.NM_MUN==i]
  selec.plot(column='V002', ax=ax, scheme='quantiles', k=3, cmap='winter', edgecolor='k', legend=True, legend_kwds={'loc':'center left', 'bbox_to_anchor':(1,0.5), 'title':'Rendimento Nominal \nmedio mensal'})
  ax.set_title(i, x = 0.5, y = 1.25, va='center')
  fig.subplots_adjust(top=0.75)
  fig.tight_layout()
  caminho = '/content/drive/MyDrive/aula_3_intensePY/'+i.replace(' ', '_')+'.jpeg'
  # plt.show(block=False)
  fig.savefig(caminho, dpi=300)

#  compactar arquivos
!zip -r /content/Mapas.zip /content/drive/MyDrive/aula_3_intensePY

# download
files.download('/content/drive/MyDrive/aula_3_intensePY')